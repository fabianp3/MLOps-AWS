# -*- coding: utf-8 -*-
"""Copia de Tarea-21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18FKtyDudoscOPrZD2ls6Bafyw2gQtnCH
"""

import pandas as pd
import numpy as np
import argparse
import os
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

def _parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--filepath', type=str, default='/opt/ml/processing/input/')
    parser.add_argument('--filename', type=str, default='home_data.csv')
    parser.add_argument('--outputpath', type=str, default='/opt/ml/processing/output/')
    return parser.parse_args()

def main():
    args = _parse_args()
    input_file = os.path.join(args.filepath, args.filename)
    output_path = args.outputpath

    # Cargar datos
    df = pd.read_csv(input_file)
    df = df.dropna()

    # Codificación
    label_encoders = {}
    for column in df.select_dtypes(include=['object']).columns:
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column])
        label_encoders[column] = le

    # Escalado
    scaler = StandardScaler()
    num_cols = df.select_dtypes(include=['float64', 'int64']).columns
    df[num_cols] = scaler.fit_transform(df[num_cols])

    # División de datos
    if 'price' not in df.columns:
        raise ValueError("❌ La columna 'price' no existe. Verifica el nombre de tu columna objetivo.")

    X = df.drop('price', axis=1)
    y = df['price']

    X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.4, random_state=42)
    X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

    # Crear carpetas
    os.makedirs(os.path.join(output_path, 'train'), exist_ok=True)
    os.makedirs(os.path.join(output_path, 'validation'), exist_ok=True)
    os.makedirs(os.path.join(output_path, 'test'), exist_ok=True)

    # Guardar datasets
    pd.concat([X_train, y_train], axis=1).to_csv(os.path.join(output_path, 'train/train.csv'), index=False)
    pd.concat([X_val, y_val], axis=1).to_csv(os.path.join(output_path, 'validation/validation.csv'), index=False)
    pd.concat([X_test, y_test], axis=1).to_csv(os.path.join(output_path, 'test/test.csv'), index=False)

    print("✅ ¡Procesamiento completado exitosamente!")

if __name__ == '__main__':
    main()